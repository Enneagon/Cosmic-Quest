% in which rain and quackles fix cloverâ€™s grand confusion
#new:Function $IsBadgeEquippedScriptVer %args: (BadgeID, Var# to store result to)
{
PUSH 	S0, S1, S2, S3, S4, RA
.Init
COPY S4, A0  %store source script pointer
LW S0, C (A0) %load args pointer into S0 
LW a1, 0000 (s0) %load arg 1 into a1 (badgeID)
JAL ~Func:get_variable %in case a variable was passed to us, get its value out
NOP
%result gets put into V0
LIO s2, 8010F498 %equipped badges address
ADDIU s3, s2, 78 %end of equipped badges
.Loop
LH        S1, 0 (S2)
BEQL    V0, S1, .End %if we find the badge...
ADDIU    A2, R0, 1 % return true
BNE        S2, S3, .Loop
ADDIU    S2, S2, 2
ADDIU    A2, R0, 0 % return false
.End
COPY A0, S4 %restore source script pointer (we never touch it but I don't know if GetVariable clobbers it)
LW a1, 0004 (s0) %load arg2, Var# to store to
%value to store (0 or 1) is already in A2
JAL ~Func:set_variable
NOP
POP       S0, S1, S2, S3, S4, RA
JR        RA
ADDIU	V0, R0, 2 %functions called from scripts need to return 2 or they will loop. Who thought this was a good design choice?
}


% A0 = badge ID, returns boolean on A0
% Doesn't follow calling convention, deal with it.
#new:Function $IsBadgeEquipped
{
PUSH	S1, S2, S3
.Init
LIO		S2, 8010F498	% position in list
ADDIU	S3, S2, 78		% end of list
.Loop
LH		S1, 0 (S2)
BEQL	A0, S1, .End
ADDIU	A0, R0, 1 % return true
BNE		S2, S3, .Loop
ADDIU	S2, S2, 2
ADDIU	A0, R0, 0 % return false
.End
POP		S1, S2, S3
JR		RA
NOP
}

#export $IsBadgeEquipped
#export $IsBadgeEquippedScriptVer
