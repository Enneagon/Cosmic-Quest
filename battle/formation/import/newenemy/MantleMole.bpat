% Mantle Mole Animations
#define .Anim:MantleMoleStill       002F0000
#define .Anim:MantleMoleIdle        002F0001
#define .Anim:MantleMoleThrow1      002F0005
% #define .Anim:MantleMoleThrow1      002F0005
% #define .Anim:MantleMoleThrow1      002F0005
% #define .Anim:MantleMoleThrow1      002F0005
% #define .Anim:MantleMoleThrow1      002F0005
% #define .Anim:MantleMoleThrow1      002F0005
#define .Anim:MantleMoleRock        002F0009
#define .Anim:MantleMoleMushroom    002F000A
#define .Anim:MantleMoleSpikeBall   002F000B
#define .Anim:MantleMoleHurt        002F000C
#define .Anim:MantleMoleScare1      002F000D
#define .Anim:MantleMoleScare2      002F000E
#define .Anim:MantleMoleScare3      002F000F
#define .Anim:MantleMoleBurntHurt1  002F0011
#define .Anim:MantleMoleBurntHurt2  002F0012
#define .Anim:MantleMoleBurntDeath  002F0013
#define .Anim:MantleMoleTeaseStill  002F0014
#define .Anim:MantleMoleTease       002F0015
#define .Anim:MantleMoleHole        002F001B

% Guys you figure out the rest of what these animations are doing. I kinda changed the ordering for them. So. We gotta organized this more sometime later.

% Mantle Mole Parts

% Uh help me out here with the Pard IDs.

% Mantle Mole Stats
#define .HP:MantleMole 3`b
% .DMG_Mole_Rock % 1-3
% .DMG_Mole_Spikes % 2-5

#new:Actor $MantleMole
{
% stats
[Index]        12b 
[Level]         8`b 
[MaxHP]         .HP:MantleMole
[Coins]         1`b 
[Flags]       00000000 
[StatusTable] $StatusTable_MantleMole 
% ai
[PartsCount]    5`s 
[PartsTable]  $PartsTable_MantleMole 
[Script]      $Script_Init_MantleMole 
% move effectiveness
[Escape]       80`b 
[Item]         85`b 
[AirLift]      70`b 
[Hurricane]    50`b % Bow's "Spook" as well
[UpAndAway]    95`b 
[PowerBounce] 100`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         34`b  18`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:DefenseTable $DefenseTable_MantleMole 
{
.Element:Normal 0`
.Element:End
}

#new:StatusTable $StatusTable_MantleMole 
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      90`
.Status:Poison     80`
.Status:Frozen    100`
.Status:Dizzy      90`
.Status:Fear        0`
.Status:Static     10`
.Status:Paralyze  100`
.Status:Shrink     90`
.Status:Stop      100`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:PartsTable $PartsTable_MantleMole 
{
00020000 01000000 FE1000FF $IdleAnimations_MantleMole $DefenseTable_MantleMole 00000000 00000000 00F90000 00000000 
80800001 020000F1 FE0C00FF $IdleAnimations_MantleMole $DefenseTable_MantleMole 00000000 00000000 00F90000 00000000 
00120001 03000000 000000FF $IdleAnimations_Rock $DefenseTable_MantleMole 00000000 00000000 00000000 00000000 
00120001 04000000 000000FF $IdleAnimations_Mushroom $DefenseTable_MantleMole 00000000 00000000 00000000 00000000 
00120001 05000000 000000FF $IdleAnimations_Spikeball $DefenseTable_MantleMole 00000000 00000000 00000000 00000000 
}

#new:IdleAnimations $IdleAnimations_MantleMole 
{
.Status:Normal    .Anim:MantleMoleIdle
.Status:Stone     .Anim:MantleMoleStill
.Status:Sleep     002F0014
.Status:Poison    .Anim:MantleMoleIdle
.Status:Stop      .Anim:MantleMoleStill
.Status:Static    .Anim:MantleMoleIdle
.Status:Paralyze  .Anim:MantleMoleStill
.Status:Dizzy     002F0014
.Status:Fear      002F0014
.Status:End
}

#new:IdleAnimations $IdleAnimations_Rock 
{
.Status:Normal    .Anim:MantleMoleRock
.Status:End
}

#new:IdleAnimations $IdleAnimations_Mushroom 
{
.Status:Normal    002F001C
.Status:End
}

#new:IdleAnimations $IdleAnimations_Spikeball 
{
.Status:Normal    002F001D
.Status:End
}

#new:IdleAnimations $IdleAnimations_MoleHole 
{
.Status:Normal    002F0012
.Status:End
}

#new:PartsTable $PartsTable_MoleHole 
{
00022000 01000000 000000FF $IdleAnimations_MoleHole 00000000 00000000 00000000 00000000 00000000 
}

#new:Script $Script_Init_MoleHole 
{
    Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
    If  *Var0  ==  00000001 
     	Call  SetPartScale  ( .Actor:Self 00000001 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
    EndIf
    Return
    End
}

#new:Actor $EmptyMoleHole 
{
% stats
[Index]        6Bb 
[Level]         9`b 
[MaxHP]         2`b 
[Coins]         2`b 
[Flags]       00640004 
[StatusTable] 00000000 
% ai
[PartsCount]    1`s 
[PartsTable]  $PartsTable_MoleHole 
[Script]      $Script_Init_MoleHole 
% move effectiveness
[Escape]       80`b 
[Item]         80`b 
[AirLift]       0`b 
[Hurricane]    80`b % Bow's "Spook" as well
[UpAndAway]    90`b 
[PowerBounce]  90`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         32`b  18`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:Vector3D $Vector3D_80226FB8_27 
{
0` -1000` 0`
}

#new:SpecialFormation $SpecialFormation_80226FC4_27 
{
$EmptyMoleHole $Vector3D_80226FB8_27 00000000 00000000 00000000 00000000 00000000 
}

#new:SpecialFormation $SpecialFormation_80226FE0_27 
{
$EmptyMoleHole $Vector3D_80226FB8_27 00000000 00000001 00000000 00000000 00000000 
}

#new:Script $Script_80226FFC_27 
{
    Call  GetStatusFlags    ( .Actor:Self *Var0 )
    If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
        Call  SummonEnemy   ( $SpecialFormation_80226FE0_27 00000000 )
    Else
     	Call  SummonEnemy   ( $SpecialFormation_80226FC4_27 00000000 )
    EndIf
    Call  GetActorPos   ( .Actor:Self *Var1 *Var2 *Var3 )
    Sub   *Var3  00000001 
    Call  SetActorPos   ( *Var0 *Var1 *Var2 *Var3 )
    Return
    End
}

#new:Script $Script_Init_MantleMole 
{
    Set *Var0 = ( *MB_DifficultyLevel + *MB_SectorsCompleted + 3` ) % Add to Minimum HP
    Call  $SetMaxHPByDifficulty ( *Var0 ) % Dynamically sets HP
    Call  BindTakeTurn      ( .Actor:Self $Script_TakeTurn_MantleMole )
    Call  BindIdle  ( .Actor:Self $Script_Idle_MantleMole )
    Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_MantleMole )
    Call  SetActorFlagBits  ( .Actor:Self 00000004 .True )
    Return
    End
}

#new:Script $Script_Idle_MantleMole 
{
    Return
    End
}

#new:Script $Script_HandleEvent_MantleMole 
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self .False )
    Call  GetLastElement    ( *VarE )
    Call  GetLastEvent      ( .Actor:Self *Var0 )
    Switch  *Var0 
        CaseOR  ==  .Event:HitCombo % 9
        CaseOR  ==  .Event:Hit % A
            If  *VarE  &  00000040 
                ChildThread
                    Wait  8`
                    Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleScare1 )
                EndChildThread
                SetConst  *Var0  00000001 
                SetConst  *Var1  .Anim:MantleMoleHurt 
                ExecWait  DoNormalHit 
                Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleScare2 )
                Wait  10`
            Else
                SetConst  *Var0  00000001 
                SetConst  *Var1  002F0005 
                ExecWait  DoNormalHit 
            EndIf
        EndCaseGroup
        Case  ==  .Event:BurnHit % E
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F000A 
            SetConst  *Var2  002F000B 
            ExecWait  DoBurnHit 
        Case  ==  .Event:BurnDeath % 24
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F000A 
            SetConst  *Var2  002F000B 
            ExecWait  DoBurnHit 
            ExecWait  $Script_80226FFC_27 
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F000C 
            ExecWait  DoDeath 
            Return
        CaseOR  ==  00000017 % 17
        CaseOR  ==  .Event:Immune % 19
            Call  GetLastElement    ( *Var0 )
            If  *Var0  &  00000040 
                Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleDig )
                Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
                Call  SetAnimation      ( .Actor:Self 00000001 002F0011 )
                Wait  80`
                Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleSurface )
                Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
                Call  SetAnimation      ( .Actor:Self 00000001 002F0010 )
                Wait  20`
                Call  SetAnimation      ( .Actor:Self 00000001 002F0014 )
                Wait  20`
            Else
                SetConst  *Var0  00000001 
                SetConst  *Var1  .Anim:MantleMoleIdle 
                ExecWait  DoImmune 
            EndIf
        EndCaseGroup
        Case  ==  .Event:Death % 20
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F0005 
            ExecWait  DoNormalHit 
            Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleHurt )
            Wait  10`
            ExecWait  $Script_80226FFC_27 
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F0009 
            ExecWait  DoDeath 
            Return
        Case  ==  .Event:RecoverStatus % 31
            Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleHurt )
            Wait  8`
            Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleScare1 )
            Wait  5`
            Call  SetAnimation  ( .Actor:Self 00000001 .Anim:MantleMoleScare2 )
            Wait  8`
        Case  ==  .Event:ScareAway % 39
            Call  SetAnimation      ( .Actor:Self 00000001 .Anim:MantleMoleHurt )
            Wait  15`
            Call  SetAnimation      ( .Actor:Self 00000001 .Anim:MantleMoleScare1 )
            Wait  15`
            Call  SetAnimation      ( .Actor:Self 00000001 .Anim:MantleMoleScare2 )
            Wait  15`
            Call  SetActorFlagBits  ( .Actor:Self 00404000 .True )
            Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_MoleHole )
            Return
        Case  ==  .Event:BeginAirLift % 3A
            SetConst  *Var0  00000001 
            SetConst  *Var1  002F0005 
            ExecWait  DoAirLift 
        Case  ==  .Event:BlowAway % 16
            ExecWait  $Script_80226FFC_27 
            Call  GetStatusFlags    ( .Actor:Self *Var0 )
            If  *Var0  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
                Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFB 00000000 )
                Call  SetAnimation  ( .Actor:Self 00000001 002F0019 )
            Else
                If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
                    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFF7 00000000 )
                Else
                    Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFE9 00000000 )
                EndIf
                Call  SetAnimation  ( .Actor:Self 00000001 002F0009 )
            EndIf
            Wait  1000`
            Return
        Case  ==  .Event:AirLiftFailed % 1F
            Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleDig )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
            Call  SetAnimation      ( .Actor:Self 00000001 002F0011 )
            Wait  40`
            Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleSurface )
            Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
            Call  SetAnimation      ( .Actor:Self 00000001 002F0010 )
            Wait  20`
            Call  SetAnimation      ( .Actor:Self 00000001 002F0014 )
            Wait  20`
        Case  ==  .Event:UpAndAway % 3D
            ExecWait  $Script_80226FFC_27 
        Default
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self .True )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}


#new:Script $Script_TakeTurn_MantleMole 
{
    Call  UseIdleAnimation  ( .Actor:Self .False )
    Call  EnableIdleScript  ( .Actor:Self 00000000 )
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetBattlePhase    ( *Var0 )
    If  *Var0  ==  00000001 
        Call  UseBattleCamPreset    ( 00000002 )
        Call  MoveBattleCamOver     (  1` )
    EndIf
    Call RandInt ( 00000002 *Var3 )
    Add  *Var3  00000003
    ChildThread
        Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleDig )
        Wait  20`
        Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleSurface )
        Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
        Add *Var0 00000005
        Add   *Var1  00000014 
        Call  SetPartPos        ( .Actor:Self *Var3 *Var0 *Var1 *Var2 )
        Call  SetPartFlagBits   ( .Actor:Self *Var3 00000001 .False )
    EndChildThread
    Call  SetAnimation      ( .Actor:Self 00000001 .Anim:MantleMoleThrow1 )
    Wait  38`
    Call  GetStatusFlags    ( .Actor:Self *Var0 )
    If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
        Call  SetPartScale  ( .Actor:Self *Var3 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
    Else
        Call  SetPartScale  ( .Actor:Self *Var3 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    EndIf
    Call  PlaySoundAtPart   ( .Actor:Self *Var3 .Sound:MoleThrow )
    Call  SetPartSounds     ( .Actor:Self *Var3 .ActorSound:Fly 00000000 00000000 )
    Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000002 00000020 )
    Switch  *Var0 
        CaseOR  ==  .HitResult:Miss % 6
        CaseOR  ==  .HitResult:Lucky % 5
            Set   *VarA  *Var0 
            Call  SetTargetActor    ( .Actor:Self .Actor:Player )
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
            Sub   *Var0  00000064 
            Set   *Var1  FFFFFFFB 
            Call  SetPartMoveSpeed  ( .Actor:Self *Var3 *Fixed[12.0] )
            Call  SetPartJumpGravity    ( .Actor:Self *Var3 *Fixed[0.1] )
                Switch *Var3
                Case == 00000005
                    Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleSpikeBall )
                Case == 00000004
                    Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleMushroom ) 
                Default
                    Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleRock )
                EndSwitch
            Call  FlyPartTo ( .Actor:Self *Var3 *Var0 *Var1 *Var2  0`  30` .Easing:Linear )
            Call  SetPartFlagBits   ( .Actor:Self *Var3 00000001 .True )
            If  *VarA  ==  .HitResult:Lucky % 5
                Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
            EndIf
            Call  YieldTurn ( )
            Call  EnableIdleScript  ( .Actor:Self .True )
            Call  UseIdleAnimation  ( .Actor:Self .True )
            Return
        EndCaseGroup
    EndSwitch
    Call  SetTargetActor    ( .Actor:Self .Actor:Player )
    Call  SetGoalToTarget   ( .Actor:Self )
    Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
    Call  SetPartMoveSpeed  ( .Actor:Self *Var3 *Fixed[12.0] )
    Call  SetPartJumpGravity    ( .Actor:Self *Var3 *Fixed[0.1] )
    Switch *Var3
        Case == 00000005
            Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleSpikeBall )
        Case == 00000004
            Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleMushroom )
        Default
            Call  SetAnimation      ( .Actor:Self *Var3 .Anim:MantleMoleRock )
        EndSwitch
    Call  FlyPartTo ( .Actor:Self *Var3 *Var0 *Var1 *Var2  0`  20` .Easing:Linear )
    Wait  2`
        Switch *Var3
        Case == 00000005
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 .DMG_Mole_Spikes 00000020 )
        Case == 00000004
            Call  SetPartFlagBits   ( .Actor:Self *Var3 00000001 .True )
            Call  PlaySoundAtPart      ( .Actor:Self 00000003 0000025C )
            Call $Function_SetHP (  )
            Call  FXRecoverHP   ( *Var0 *Var1 *Var2 2` ) %display amount to heal hp (heals 5 currently)
        Default
            Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 .DMG_Mole_Rock 00000020 )
        EndSwitch
    Switch  *Var0 
        CaseOR  ==  .HitResult:Hit % 0
        CaseOR  ==  .HitResult:QuakeImmune % 2
            Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
            Sub   *Var0  00000037 
            Set   *Var1  00000000 
            Call  SetPartMoveSpeed  ( .Actor:Self *Var3 *Fixed[6.0] )
            Call  SetPartJumpGravity    ( .Actor:Self *Var3 *Fixed[0.1] )
            Call  FlyPartTo ( .Actor:Self *Var3 *Var0 *Var1 *Var2  0`  25` .Easing:Linear )
            Call  SetPartMoveSpeed  ( .Actor:Self *Var3 *Fixed[4.0] )
            Sub   *Var0  00000014 
            Call  FlyPartTo ( .Actor:Self *Var3 *Var0 *Var1 *Var2  0`  21` .Easing:Linear )
            Call  SetPartFlagBits   ( .Actor:Self *Var3 00000001 .True )
        EndCaseGroup
    EndSwitch
    Call  EnableIdleScript  ( .Actor:Self .True )
    Call  UseIdleAnimation  ( .Actor:Self .True )
    Return
    End
}


#new:Function $Function_SetHP
{
    LA        v0, 8010F290 %Load Address of current HP
    LBU       t0, 2 (v0) %Load value of the address, current HP
    LBU       t1, 4 (v0) %Load Max HP value
    ADDIU     t0, t0, 2 %Add the current HP value to 2
    SUBU      t2, t0, t1 %Subtract Max HP from Current HP
    BLTZ      t2, .o31 %Jump to .031 if less than 0
    NOP
    COPY      t0, t1 %Sets Current HP to Max HP if it was equal to or greater than max
    .o31 %Label!
    SB        t0, 2 (v0) %Set the current HP value to t0
    JR RA
    ORI v0, r0, 2
}