@ $Script_Main {
    Set   *GB_WorldLocation  .Location:GoombaRoad
    Call  SetCamPerspective  ( .Cam:Default 00000003 00000019 00000010 00001000 )
    Call  SetCamBGColor      ( .Cam:Default 00000000 00000000 00000000 )
    Call  SetCamEnabled      ( .Cam:Default .True
    Call  SetCamLeadPlayer   ( .Cam:Default .False )
    Exec  $Script_SetupMusic
    Exec  $Script_ShipBindsToMario
    If *MF_NewSector == .True
        Exec  $Script_RandomizeNodes
    Else
        Exec  $Script_RestoreNodes
    EndIf
    Exec  $Script_EnterMap
    Exec  $Script_Main_Callback_AfterEnterMap
    Return
    End
}

#new:Script $Script_ShipBindsToMario
{
    Call EnableGroup ( ~Model:Ships .False )
    Switch *MB_CurrentShip
    Case == 1`    
        Call EnableGroup ( ~Model:Rocket1 .True )
        Thread
            Loop
                Call  GetPlayerPos ( *Var0 *Var1 *Var2 )
                Call  TranslateGroup ( ~Model:Rocket1 *Var0 00000000 *Var2 )
                Wait  1`
            EndLoop
        EndThread
    Case == 2`    
        Call EnableGroup ( ~Model:Rocket2 .True )
        Thread
            Loop
                Call  GetPlayerPos ( *Var0 *Var1 *Var2 )
                Call  TranslateGroup ( ~Model:Rocket2 *Var0 00000000 *Var2 )
                Call  RotateGroup ( ~Model:Rocket2 *MapVar[0] 00000000 00000001 00000000 )
                Add  *MapVar[0] -1`
                Wait  1`
            EndLoop
        EndThread
    EndSwitch
    Return
    End
}

#new:Script $Script_RandomizeNodes
{
    Call EnableGroup ( ~Model:WarpNodes .False )
    Call EnableModel ( ~Model:Node0 .True )
    Call EnableModel ( ~Model:Node99 .True )
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node1r .True )
        Set *MB_Node1 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node1b .True )
        Set *MB_Node1 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node2r .True )
        Set *MB_Node2 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node2b .True )
        Set *MB_Node2 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node3r .True )
        Set *MB_Node3 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node3b .True )
        Set *MB_Node3 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node4r .True )
        Set *MB_Node4 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node4b .True )
        Set *MB_Node4 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node5r .True )
        Set *MB_Node5 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node5b .True )
        Set *MB_Node5 4`
    EndSwitch
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node6r .True )
        Set *MB_Node6 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node6b .True )
        Set *MB_Node6 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node7r .True )
        Set *MB_Node7 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node7b .True )
        Set *MB_Node7 4`
    EndSwitch
    Call RandInt ( 100` *Var0 )
    ExecWait $Script_NodeModifiers
    Switch *Var0
    Case 0` to 60`
        Call EnableModel ( ~Model:Node8r .True )
        Set *MB_Node8 3`
    Case 61` to 100`
        Call EnableModel ( ~Model:Node8b .True )
        Set *MB_Node8 4`
    EndSwitch
    Return
    End
}

#new:Script $Script_NodeModifiers
{
    If *MF_AnomaliesPlus == .True
        Add *Var0 10`
        If *Var0 > 100`
            Set *Var0 100`
        EndIf
    EndIf
    If *MF_AnomaliesMinus == .True
        Sub *Var0 10`
        If *Var0 < 0`
            Set *Var0 0`
        EndIf
    EndIf
    If *MF_OopsAllAnomalies == .True
        Set *Var0 100`
    EndIf
    Return
    End
}

#new:Script $Script_RestoreNodes
{
    Call EnableGroup ( ~Model:WarpNodes .False )
    Call EnableModel ( ~Model:Node0 .True )
    Call EnableModel ( ~Model:Node99 .True )
    Switch *MB_Node1
    Case == 1`
        Call EnableModel ( ~Model:Node1g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node1y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node1r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node1b .True )
    EndSwitch
    Switch *MB_Node2
    Case == 1`
        Call EnableModel ( ~Model:Node2g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node2y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node2r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node2b .True )
    EndSwitch
    Switch *MB_Node3
    Case == 1`
        Call EnableModel ( ~Model:Node3g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node3y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node3r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node3b .True )
    EndSwitch
    Switch *MB_Node4
    Case == 1`
        Call EnableModel ( ~Model:Node4g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node4y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node4r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node4b .True )
    EndSwitch
    Switch *MB_Node5
    Case == 1`
        Call EnableModel ( ~Model:Node5g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node5y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node5r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node5b .True )
    EndSwitch
    Switch *MB_Node6
    Case == 1`
        Call EnableModel ( ~Model:Node6g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node6y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node6r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node6b .True )
    EndSwitch
    Switch *MB_Node7
    Case == 1`
        Call EnableModel ( ~Model:Node7g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node7y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node7r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node7b .True )
    EndSwitch
    Switch *MB_Node8
    Case == 1`
        Call EnableModel ( ~Model:Node8g .True )
    Case == 2`
        Call EnableModel ( ~Model:Node8y .True )
    Case == 3`
        Call EnableModel ( ~Model:Node8r .True )
    Case == 4`
        Call EnableModel ( ~Model:Node8b .True )
    EndSwitch
    Return
    End
}

@ $Script_Main_Callback_AfterEnterMap {
    Call  DisablePlayerInput ( .True )
    Call  DisablePlayerPhysics ( .True )
    If *MF_NewSector == .True
        Exec $Script_StarterPool
        Return
    EndIf
    Switch *MB_CurrentNode
    Case == 99`
        Call  ShowMessageAtScreenPos    ( 002F0015  160`  40` )
        Set *MB_CurrentNode 0`
        Set *MF_NewSector .True
        Exec $Script_NextSector
        Return
    EndCaseGroup
    CaseOR == 8`
    CaseOR == 7`
        Call  ShowMessageAtScreenPos    ( 002F0002  160`  40` )
        Call  ShowChoice ( 002F0014 ) % One node choice - Tatanga Station!
        Call CloseMessage()
        Call  GetModelCenter ( ~Model:Node99 )
        Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Set *MB_CurrentNode 99`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node99
            Exec $Script_TatangaStation
    EndCaseGroup
    CaseOR == 6`
    CaseOR == 5`
        Wait 1`
        Switch *MB_Node7
        Case == 3`
            Set *Var3 002F000E
            Set *Debug[1] *Var3
        Case == 4`
            Set *Var3 002F000F
            Set *Debug[1] *Var3
        EndSwitch
        Call  SetMessageString ( *Var3 00000000 )
        Wait 1`
        Switch *MB_Node8
        Case == 3`
            Set *Var3 002F000E
        Case == 4`
            Set *Var3 002F000F
        EndSwitch
        Call  SetMessageString ( *Var3 00000001 )
        Call  ShowMessageAtScreenPos    ( 002F0002  160`  40` )
        Call  ShowChoice ( 002F0006 )
        If  *Var0  ==  00000000
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node7g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node7
            Set *MB_CurrentNode 7`
            Switch *MB_Node7
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        Else
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node8g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node8
            Set *MB_CurrentNode 8`
            Switch *MB_Node8
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        EndIf
    EndCaseGroup
    CaseOR == 4`
    CaseOR == 3`
        Wait 1`
        Switch *MB_Node5
        Case == 3`
            Set *Var3 002F000E
            Set *Debug[1] *Var3
        Case == 4`
            Set *Var3 002F000F
            Set *Debug[1] *Var3
        EndSwitch
        Call  SetMessageString ( *Var3 00000000 )
        Wait 1`
        Switch *MB_Node6
        Case == 3`
            Set *Var3 002F000E
        Case == 4`
            Set *Var3 002F000F
        EndSwitch
        Call  SetMessageString ( *Var3 00000001 )
        Call  ShowMessageAtScreenPos    ( 002F0002  160`  40` )
        Call  ShowChoice ( 002F0006 )
        If  *Var0  ==  00000000
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node5g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node5
            Set *MB_CurrentNode 5`
            Switch *MB_Node5
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        Else
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node6g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node6
            Set *MB_CurrentNode 6`
            Switch *MB_Node6
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        EndIf
    EndCaseGroup
    CaseOR == 2`
    CaseOR == 1`
        Wait 1`
        Switch *MB_Node3
        Case == 3`
            Set *Var3 002F000E
            Set *Debug[1] *Var3
        Case == 4`
            Set *Var3 002F000F
            Set *Debug[1] *Var3
        EndSwitch
        Call  SetMessageString ( *Var3 00000000 )
        Wait 1`
        Switch *MB_Node4
        Case == 3`
            Set *Var3 002F000E
        Case == 4`
            Set *Var3 002F000F
        EndSwitch
        Call  SetMessageString ( *Var3 00000001 )
        Call  ShowMessageAtScreenPos    ( 002F0002  160`  40` )
        Call  ShowChoice ( 002F0006 )
        If  *Var0  ==  00000000
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node3g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node3
            Set *MB_CurrentNode 3`
            Switch *MB_Node3
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        Else
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node4g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node4
            Set *MB_CurrentNode 4`
            Switch *MB_Node4
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        EndIf
    EndCaseGroup
    Default
        Wait 1`
        Switch *MB_Node1
        Case == 3`
            Set *Var3 002F000E
            Set *Debug[1] *Var3
        Case == 4`
            Set *Var3 002F000F
            Set *Debug[1] *Var3
        EndSwitch
        Call  SetMessageString ( *Var3 00000000 )
        Wait 1`
        Switch *MB_Node2
        Case == 3`
            Set *Var3 002F000E
        Case == 4`
            Set *Var3 002F000F
        EndSwitch
        Call  SetMessageString ( *Var3 00000001 )
        Call  ShowMessageAtScreenPos    ( 002F0002  160`  40` )
        Call  ShowChoice ( 002F0006 )
        If  *Var0  ==  00000000
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node1g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node1
            Set *MB_CurrentNode 1`
            Switch *MB_Node1
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        Else
            Call CloseMessage()
            Call  GetModelCenter ( ~Model:Node2g )
            Call  PlayerMoveTo ( *Var0 *Var2 60` )
            Wait  20`
            Call $Function_GetArbitraryByte ( *MB_LastArea 800740AB )
            Call GetMapID ( *MB_LastMap )
            SetConst *MB_LastNode ~Entry:sec_08:Node2
            Set *MB_CurrentNode 2`
            Switch *MB_Node2
            Case == 3`
                Exec $Script_HostilePool
            Case == 4`
                Exec $Script_AnomalyPool
            EndSwitch
        EndIf
    EndSwitch
    Return
    End
}

#new:Script $Script_StarterPool
{
    Set *MF_NewSector .False
    Call RandInt ( 100` *Var0 )
    Switch *Var0
    Case 0` to 100`
        Call  ShowMessageAtScreenPos    ( 002F001B  160`  40` ) % No Encounter!
    EndSwitch
    Exec $Script_Main_Callback_AfterEnterMap
    Return
    End
}

#new:Script $Script_HostilePool
{
    Call RandInt ( 100` *Var0 )
    Switch *Var0
    Case 0` to 100`
        Call  ShowMessageAtScreenPos    ( 002F001B  160`  40` ) % No Encounter!
    EndSwitch
    Exec $Script_Main_Callback_AfterEnterMap
    Return
    End
}

#new:Script $Script_AnomalyPool
{
    Call RandInt ( 100` *Var0 )
    Switch *Var0
    Case 0` to 100`
        Call  ShowMessageAtScreenPos    ( 002F001B  160`  40` ) % No Encounter!
    EndSwitch
    Exec $Script_Main_Callback_AfterEnterMap
    Return
    End
}

#new:Script $Script_TatangaStation
{
    Call RandInt ( 100` *Var0 )
    Switch *Var0
    Case 0` to 100`
        Call  ShowMessageAtScreenPos    ( 002F001B  160`  40` ) % No Encounter!
    EndSwitch
    Exec $Script_Main_Callback_AfterEnterMap
    Return
    End
}

#new:Script $Script_NextSector
{
    Set *MB_SectorsCompleted 0`
    Call  PlayerMoveTo ( 900` 0` 40` )
    Wait  20`
    Set *VarF 002F0025
    Call  SetMessageString ( *VarF 00000000 )
    Call  ShowMessageAtScreenPos    ( 002F001C  160`  40` ) % Next Sector!
    Call  ShowChoice ( 002F005A )
    Call CloseMessage ()
    Call GotoMapSpecial ( "sec_00" ~Entry:sec_00:SectorStart 0000000D )    % Game Start?
    Return
    End
}